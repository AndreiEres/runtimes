name: Create Draft Release

on:
  push:
    paths:
    - 'CHANGELOG'
  workflow_dispatch:


jobs:
  enumerate:
    runs-on: ubuntu-latest
    outputs:
      runtime: ${{ steps.generate-matrix.outputs.runtime }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Generate runtime matrix
        id: generate-matrix
        run: |
          >>$GITHUB_OUTPUT echo runtime="[$(find * -name "lib.rs" -not -path "*/common/*" -not -path "*/constants/*" | awk -F/ '{sub("/src/lib.rs",""); print "[\"" gensub("/" $NF "$", "", "g") "\",\"" $NF "\"],"}' | tr -d $'\n')]"
  build-runtimes:
    continue-on-error: true
    runs-on: ubuntu-latest
    needs:
      - enumerate
    strategy:
      matrix:
        runtime: ${{ fromJSON(needs.enumerate.outputs.runtime) }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Cache target dir
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/${{ matrix.runtime[0] }}/${{ matrix.runtime[1] }}/target"
          key: srtool-target-${{ matrix.runtime[0] }}-${{ matrix.runtime[1] }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.runtime[0] }}-${{ matrix.runtime[1] }}-
            srtool-target-${{ matrix.runtime[0] }}-

      - name: Build ${{ matrix.runtime[1] }}
        id: srtool_build
        uses: chevdor/srtool-actions@v0.7.0
        with:
          chain: ${{ matrix.runtime[1] }}
          runtime_dir: "${{ matrix.runtime[0] }}/${{ matrix.runtime[1] }}"

      - name: Store ${{ matrix.runtime[1] }} srtool digest to disk
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq > ${{ matrix.runtime[1] }}_srtool_output.json

      - name: Upload ${{ matrix.runtime[1] }} srtool json
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.runtime[1] }}-srtool-json
          path: ${{ matrix.runtime[1] }}_srtool_output.json

      - name: Upload  ${{ matrix.runtime[1] }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.runtime[1] }}
          path: |
            ${{ steps.srtool_build.outputs.wasm_compressed }}

  publish-draft-release:
    runs-on: ubuntu-latest
    needs:
      - build-runtimes
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download srtool json output
        uses: actions/download-artifact@v3

      - name: Archive context output
        uses: actions/upload-artifact@v3
        with:
          name: release-notes-context
          path: |
            **/*_srtool_output.json

      - name: Add runtime info to changelog
        run: |
          C() { >>CHANGELOG echo $@; }
          SRTOOL() { <$(find . -name '*_srtool_output.json' | head -n1) jq -r $1; }
          C "## Runtime info"
          C "*These runtimes were built with $(SRTOOL rustc) using $(SRTOOL gen)*  "
          for JSON in $(find . -name '*_srtool_output.json' | sort -sr); do
            WASM() { <${JSON} jq -r ".runtimes.compressed.subwasm.$1"; }

            C "### $(WASM core_version.specName)"
            C '```'
            C "🏋️ Runtime Size:           $(numfmt --to iec-i --format "%.2f" $(WASM size)) ($(WASM size) bytes)"
            C "🗜 Compressed:             $(WASM '.compression.compressed | if . then "Yes" else "No" end'): $(WASM '.compression | 1 - .size_compressed / .size_decompressed | . * 10000 | round / 100')%"
            C "🔥 Core Version:           $(WASM core_version.specName)-$(WASM core_version.specVersion) $(WASM core_version.implName)-$(WASM core_version.implVersion).tx$(WASM core_version.transactionVersion).au$(WASM core_version.authoringVersion)"
            C "🎁 Metadata version:       V$(WASM metadata_version)"
            C "🗳️ Blake2-256 hash:        $(WASM blake2_256)"
            C "📦 IPFS:                   $(WASM ipfs_hash)"
            C '```'
          done
      - name: Create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Runtimes ${{ github.ref }}
          body_path: CHANGELOG
          draft: true

  publish-runtimes:
    continue-on-error: true
    runs-on: ubuntu-latest
    env:
      RUNTIME_DIR: runtime
    needs:
      - publish-draft-release
      - enumerate
    strategy:
      matrix:
        runtime: ${{ fromJSON(needs.enumerate.outputs.runtime) }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Get runtime info
        env:
          JSON: release-notes-context/${{ matrix.runtime[1] }}-srtool-json/${{ matrix.runtime[1] }}_srtool_output.json
        run: |
          >>$GITHUB_ENV echo ASSET=$(find ${{ matrix.runtime[1] }} -name '*.compact.compressed.wasm')
          >>$GITHUB_ENV echo SPEC=$(<${JSON} jq -r .runtimes.compact.subwasm.core_version.specVersion)
          >>$GITHUB_ENV echo TXVER=$(<${JSON} jq -r .runtimes.compact.subwasm.core_version.transactionVersion)

      - name: Upload compressed ${{ matrix.runtime[1] }} v${{ env.SPEC }} tx${{ env.TXVER }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ matrix.runtime[1] }}_runtime-v${{ env.SPEC }}.tx${{ env.TXVER }}.compact.compressed.wasm
          asset_content_type: application/wasm
