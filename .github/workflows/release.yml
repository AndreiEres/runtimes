name: Create Draft Release

on:
  push:
    paths:
    - 'CHANGELOG'
  workflow_dispatch:


jobs:
  build-runtimes:
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [
          # relay/para, runtime path, package name, chain
          ["relay", "polkadot", "polkadot-runtime", "polkadot"],
          ["relay", "kusama", "kusama-runtime", "kusama"],
          #["relay", "parachains", "polkadot-runtime-parachains", "polkadot"], # ?
          #["relay", "metrics", "polkadot-runtime-metrics", "polkadot"], # ?         
          ["system-parachains", "collectives/collectives-polkadot", "collectives-polkadot-runtime", "collectives-polkadot"],
          ["system-parachains", "asset-hubs/asset-hub-polkadot", "statemint-runtime", "statemint"],
          ["system-parachains", "asset-hubs/asset-hub-kusama", "statemine-runtime", "statemine"],
          ["system-parachains", "bridge-hubs/bridge-hub-polkadot", "bridge-hub-polkadot-runtime", "bridge-hub-polkadot"],
          ["system-parachains", "bridge-hubs/bridge-hub-kusama", "bridge-hub-kusama-runtime", "bridge-hub-kusama"]
        ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Cache target dir
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/${{ matrix.runtime[0] }}/runtimes/${{ matrix.runtime[1] }}/target"
          key: srtool-target-${{ matrix.runtime[0] }}-${{ matrix.runtime[2] }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.runtime[0] }}-${{ matrix.runtime[2] }}-
            srtool-target-${{ matrix.runtime[0] }}-

      - name: Build ${{ matrix.runtime[2] }}
        id: srtool_build
        uses: chevdor/srtool-actions@v0.7.0
        with:
          tag: 1.66.1
          chain: ${{ matrix.runtime[3] }}
          package: ${{ matrix.runtime[2] }}
          runtime_dir: "${{ matrix.runtime[0] }}/runtimes/${{ matrix.runtime[1] }}"

      - name: Store ${{ matrix.runtime[3] }} srtool digest to disk
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq > ${{ matrix.runtime[3] }}_srtool_output.json

      - name: Upload ${{ matrix.runtime[3] }} srtool json
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.runtime[3] }}-srtool-json
          path: ${{ matrix.runtime[3] }}_srtool_output.json

      - name: Upload  ${{ matrix.runtime[3] }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.runtime[3] }}
          path: |
            ${{ steps.srtool_build.outputs.wasm_compressed }}

  publish-draft-release:
    runs-on: ubuntu-latest
    needs: ["build-runtimes"]
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download srtool json output
        uses: actions/download-artifact@v3

      - name: Archive context output
        uses: actions/upload-artifact@v3
        with:
          name: release-notes-context
          path: |
            **/*_srtool_output.json

      - name: Download context json
        uses: actions/download-artifact@v3
        with:
          name: release-notes-context

      - name: Add runtime info to changelog
        run: |
          >>CHANGELOG echo "## Runtime info"
          for JSON in $(find release-notes-context -name '*_srtool_output.json'); do
            C() { >>CHANGELOG echo $@; }
            WASM() { <${JSON} jq -r .runtimes.compact.subwasm.$1; }

            C "### $(WASM core_version.specName)"
            C "```"
            C "🏋️ Runtime Size:           $(WASM size) bytes"
            C "🔥 Core Version:           $(WASM core_version.specName)-$(WASM core_version.specVersion) ($(WASM core_version.implName)-$(WASM core_version.implVersion).tx$(WASM core_version.transactionVersion).au$(WASM core_version.authoringVersion))"
            C "🎁 Metadata version:       V$(WASM metadata_version)"
            C "🗳️ system.setCode hash:    $(WASM proposal_hash)"
            C "🗳️ authorizeUpgrade hash:  $(WASM parachain_authorize_upgrade_hash)"
            C "🗳️ Blake2-256 hash:        $(WASM blake2_256)"
            C "📦 IPFS:                   $(WASM ipfs_hash)"
            C "```"
          done
      - name: Create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Runtimes ${{ github.ref }}
          body_path: CHANGELOG
          draft: true

  publish-runtimes:
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: ["publish-draft-release"]
    env:
      RUNTIME_DIR: runtime
    strategy:
      matrix:
        runtime: [ # this is the same matrix as above
          # relay/para, runtime path, package name, chain
          ["relay", "polkadot", "polkadot-runtime", "polkadot"],
          ["relay", "kusama", "kusama-runtime", "kusama"],
          #["relay", "parachains", "polkadot-runtime-parachains", "polkadot"], # ?
          #["relay", "metrics", "polkadot-runtime-metrics", "polkadot"], # ?         
          ["system-parachains", "collectives/collectives-polkadot", "collectives-polkadot-runtime", "collectives-polkadot"],
          ["system-parachains", "asset-hubs/asset-hub-polkadot", "statemint-runtime", "statemint"],
          ["system-parachains", "asset-hubs/asset-hub-kusama", "statemine-runtime", "statemine"],
          ["system-parachains", "bridge-hubs/bridge-hub-polkadot", "bridge-hub-polkadot-runtime", "bridge-hub-polkadot"],
          ["system-parachains", "bridge-hubs/bridge-hub-kusama", "bridge-hub-kusama-runtime", "bridge-hub-kusama"]
        ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Get runtime info
        env:
          JSON: release-notes-context/${{ matrix.runtime[3] }}-srtool-json/${{ matrix.runtime[3] }}_srtool_output.json
        run: |
          >>$GITHUB_ENV echo ASSET=$(find ${{ matrix.runtime[3] }} -name '*.compact.compressed.wasm')
          >>$GITHUB_ENV echo SPEC=$(<${JSON} jq -r .runtimes.compact.subwasm.core_version.specVersion)
          >>$GITHUB_ENV echo TXVER=$(<${JSON} jq -r .runtimes.compact.subwasm.core_version.transactionVersion)

      - name: Upload compressed ${{ matrix.runtime[3] }} v${{ env.SPEC }} tx${{ env.TXVER }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ matrix.runtime[2] }}-v${{ env.SPEC }}.tx${{ env.TXVER }}.compact.compressed.wasm
          asset_content_type: application/wasm
